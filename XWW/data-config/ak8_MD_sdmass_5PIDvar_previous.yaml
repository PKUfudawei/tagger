### use `&`, `|`, `~` for logical operations on numpy arrays
### can use functions from `math`, `np` (numpy), and `ak` in the expression

## Note: hww has fake fj_isQCD=1.. However in below selection we do not select label_H_wwunmatch in training pool
selection: >-
    (jet_tightId==1) & (jet_no<2) & (fj_pt>200) & (fj_pt<2500) & (fj_sdmass>=20) & (fj_sdmass<260) &
    (
      (label_H_ww3q_0c>0)|(label_H_ww3q_1c>0)|(label_H_ww3q_2c>0)|(label_H_ww4q_0c>0)|(label_H_ww4q_1c>0)|(label_H_ww4q_2c>0)|
        (label_H_wwevqq_0c>0)|(label_H_wwevqq_1c>0)|(label_H_wwmvqq_0c>0)|(label_H_wwmvqq_1c>0)|(label_H_wwhadtauvqq_0c>0)|
          (label_H_wwhadtauvqq_1c>0)|(label_H_wwleptauevqq_0c>0)|(label_H_wwleptauevqq_1c>0)|(label_H_wwleptaumvqq_0c>0)|(label_H_wwleptaumvqq_1c>0)
      | (
        ((label_QCD_b>0)|(label_QCD_bb>0)|(label_QCD_c>0)|(label_QCD_cc>0)|(label_QCD_others>0)|
          (label_Top_bc>0)|(label_Top_bcq>0)|(label_Top_bev>0)|(label_Top_bhadtauv>0)|(label_Top_bleptauev>0)|(label_Top_bleptaumv>0)|(label_Top_bmv>0)|(label_Top_bq>0)|(label_Top_bqq>0)|
            (label_W_cq>0)|(label_W_cq_b>0)|(label_W_cq_c>0)|(label_W_qq>0)|(label_W_qq_b>0)|(label_W_qq_c>0)) 
        & (event_no%7!=0)
      )
    )

### selection to apply at test time (i.e., when running w/ --predict)
test_time_selection: >-
    (jet_tightId==1) & (jet_no<2) & (fj_pt>200) & (fj_pt<2500) & (fj_sdmass>=20) & (fj_sdmass<260) &
    (
      (label_H_ww3q_0c>0)|(label_H_ww3q_1c>0)|(label_H_ww3q_2c>0)|(label_H_ww4q_0c>0)|(label_H_ww4q_1c>0)|(label_H_ww4q_2c>0)|
        (label_H_wwevqq_0c>0)|(label_H_wwevqq_1c>0)|(label_H_wwmvqq_0c>0)|(label_H_wwmvqq_1c>0)|(label_H_wwhadtauvqq_0c>0)|
          (label_H_wwhadtauvqq_1c>0)|(label_H_wwleptauevqq_0c>0)|(label_H_wwleptauevqq_1c>0)|(label_H_wwleptaumvqq_0c>0)|(label_H_wwleptaumvqq_1c>0)
      | (
        ((label_QCD_b>0)|(label_QCD_bb>0)|(label_QCD_c>0)|(label_QCD_cc>0)|(label_QCD_others>0)|
          (label_Top_bc>0)|(label_Top_bcq>0)|(label_Top_bev>0)|(label_Top_bhadtauv>0)|(label_Top_bleptauev>0)|(label_Top_bleptaumv>0)|(label_Top_bmv>0)|(label_Top_bq>0)|(label_Top_bqq>0)|
            (label_W_cq>0)|(label_W_cq_b>0)|(label_W_cq_c>0)|(label_W_qq>0)|(label_W_qq_b>0)|(label_W_qq_c>0)) 
        & (event_no%7==0)
      )
    )
new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `ak` in the expression
    pfcand_mask: ak.ones_like(pfcand_etarel)
    sv_mask: ak.ones_like(sv_etarel)
    label_H_WqqWqq: (label_H_ww4q_0c>0)|(label_H_ww4q_1c>0)|(label_H_ww4q_2c>0)
    label_H_WqqWq: (label_H_ww3q_0c>0)|(label_H_ww3q_1c>0)|(label_H_ww3q_2c>0)
    label_H_WqqWev: (label_H_wwevqq_0c>0)|(label_H_wwevqq_1c>0)
    label_H_WqqWmv: (label_H_wwmvqq_0c>0)|(label_H_wwmvqq_1c>0)
    label_H_WqqWtauev: (label_H_wwleptauevqq_0c>0)|(label_H_wwleptauevqq_1c>0)
    label_H_WqqWtaumv: (label_H_wwleptaumvqq_0c>0)|(label_H_wwleptaumvqq_1c>0)
    label_H_WqqWtauhv: (label_H_wwhadtauvqq_0c>0)|(label_H_wwhadtauvqq_1c>0)
    label_QCD: (label_QCD_b>0)|(label_QCD_bb>0)|(label_QCD_c>0)|(label_QCD_cc>0)|(label_QCD_others>0)
    label_Top_bWqq: (label_Top_bqq>0)|(label_Top_bcq>0)
    label_Top_bWq: (label_Top_bq>0)|(label_Top_bc>0)
    label_Top_bWev: label_Top_bev
    label_Top_bWmv: label_Top_bmv
    label_Top_bWtauhv: label_Top_bhadtauv
    label_Top_bWtauev: label_Top_bleptauev
    label_Top_bWtaumv: label_Top_bleptaumv
    label_Top: (label_Top_bc>0)|(label_Top_bcq>0)|(label_Top_bev>0)|(label_Top_bhadtauv>0)|(label_Top_bleptauev>0)|(label_Top_bleptaumv>0)|(label_Top_bmv>0)|(label_Top_bq>0)|(label_Top_bqq>0)
    label_Wqq_jets: (label_W_cq>0)|(label_W_cq_b>0)|(label_W_cq_c>0)|(label_W_qq>0)|(label_W_qq_b>0)|(label_W_qq_c>0)
    ##target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass)

preprocess:
    ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
    method: manual
    ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
    data_fraction:

inputs:
    pf_points:
        length: 100
        vars:
            - pfcand_etarel
            - pfcand_phirel
    pf_features:
        length: 100
        vars:
            ### [format 1]: var_name (no transformation)
            ### [format 2]: [var_name,
            ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto),
            ###              multiply_by(optional, default=1),
            ###              clip_min(optional, default=-5),
            ###              clip_max(optional, default=5),
            ###              pad_value(optional, default=0)]
            - [pfcand_pt_log_nopuppi, 1, 0.5]
            - [pfcand_e_log_nopuppi, 1.3, 0.5]
            - pfcand_etarel
            - pfcand_phirel
            - [pfcand_abseta, 0.6, 1.6]
            - pfcand_charge
            - pfcand_isEl
            - pfcand_isMu
            - pfcand_isGamma
            - pfcand_isChargedHad
            - pfcand_isNeutralHad
            - [pfcand_VTX_ass, 4, 0.3]
            - pfcand_lostInnerHits
            - [pfcand_normchi2, 5, 0.2]
            - [pfcand_quality, 0, 0.2]
            - [pfcand_dz, 0, 180]
            - [pfcand_dzsig, 0, 0.9]
            - [pfcand_dxy, 0.0, 300]
            - [pfcand_dxysig, 0, 1.0]
            - [pfcand_btagEtaRel, 1.5, 0.5]
            - [pfcand_btagPtRatio, 0, 1]
            - [pfcand_btagPParRatio, 0, 1]
            - [pfcand_btagSip3dVal, 0, 100]
            - [pfcand_btagSip3dSig, 0, 0.5]
            - [pfcand_btagJetDistVal, 0, 40]
    pf_mask:
        length: 100
        vars:
            - pfcand_mask
    sv_points:
        length: 10
        vars:
            - sv_etarel
            - sv_phirel
    sv_features:
        length: 10
        vars:
            - [sv_pt_log, 4, 0.6]
            - [sv_mass, 1.2, 0.3]
            - sv_etarel
            - sv_phirel
            - [sv_abseta, 0.5, 1.6]
            - [sv_ntracks, 3, 1]
            - [sv_normchi2, 0.8, 0.6]
            - [sv_dxy, 0.4, 0.25]
            - [sv_dxysig, 7, 0.02]
            - [sv_d3d, 0.5, 0.2]
            - [sv_d3dsig, 7, 0.02]
    sv_mask:
        length: 10
        vars:
            - sv_mask

labels:
    ### type can be `simple`, `custom`
    ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
    type: simple
    value: [
            label_H_WqqWqq,
            label_H_WqqWq,
            label_H_WqqWev,
            label_H_WqqWmv,
            label_H_WqqWtauev,
            label_H_WqqWtaumv,
            label_H_WqqWtauhv,
            label_QCD_bb,
            label_QCD_cc,
            label_QCD_b,
            label_QCD_c,
            label_QCD_others,
            #label_Top_bWqq,
            #label_Top_bWq,
            #label_Top_bWev,
            #label_Top_bWmv,
            #label_Top_bWtauhv,
            #label_Top_bWtauev,
            #label_Top_bWtaumv,
            #label_Wqq_jets,
        ]
    ### [option 2] otherwise use `custom` to define the label, then `value` is a map
    ## type: custom
    ## value:
    # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass)

observers:
    - event_no
    - fj_label
    - fj_pt
    - fj_eta
    - fj_phi
    - fj_sdmass
    - fj_sdmass_fromsubjets
    - fj_gen_mass
    - fj_genjet_sdmass
    - fj_isQCD
    - sample_isQCD
    - npfcands
    - pfDeepBoostedDiscriminatorsJetTags_TvsQCD
    - pfDeepBoostedDiscriminatorsJetTags_WvsQCD
    - pfDeepBoostedDiscriminatorsJetTags_HbbvsQCD
    - pfMassDecorrelatedDeepBoostedDiscriminatorsJetTags_TvsQCD
    - pfMassDecorrelatedDeepBoostedDiscriminatorsJetTags_WvsQCD
    - pfMassDecorrelatedDeepBoostedDiscriminatorsJetTags_ZHbbvsQCD
    - pfParticleNetDiscriminatorsJetTags_TvsQCD
    - pfParticleNetDiscriminatorsJetTags_WvsQCD
    - pfParticleNetDiscriminatorsJetTags_HbbvsQCD
    - pfMassDecorrelatedParticleNetDiscriminatorsJetTags_XbbvsQCD
    - pfMassDecorrelatedParticleNetDiscriminatorsJetTags_XccvsQCD
    - pfMassDecorrelatedParticleNetJetTags_probXbb
    - pfMassDecorrelatedParticleNetJetTags_probXcc
    - pfMassDecorrelatedParticleNetJetTags_probXqq

weights:
    ### [option 1] use precomputed weights stored in the input files
    # use_precomputed_weights: true
    # weight_branches: [weight, class_weight]
    ### [option 2] compute weights on-the-fly using reweighting histograms
    use_precomputed_weights: false
    reweight_method: flat
    reweight_vars:
        fj_pt: [200, 251, 316, 398, 501, 630, 793, 997, 1255, 1579, 1987, 2500]
        fj_sdmass:
            [
                20,
                30,
                40,
                50,
                60,
                70,
                80,
                90,
                100,
                110,
                120,
                130,
                140,
                150,
                160,
                170,
                180,
                190,
                200,
                210,
                220,
                230,
                240,
                250,
                260,
            ]
    reweight_classes: [
            label_H_WqqWqq,
            label_H_WqqWq,
            label_H_WqqWev,
            label_H_WqqWmv,
            label_H_WqqWtauev,
            label_H_WqqWtaumv,
            label_H_WqqWtauhv,
            label_QCD,
            #label_Wqq_jets,
            #label_Top,
        ]
    class_weights: [0.32, 0.08, 0.2, 0.2, 0.03, 0.03, 0.14, 1] #, 0.5, 0.15]
    reweight_hists:
